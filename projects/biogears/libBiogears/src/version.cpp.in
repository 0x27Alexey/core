#include <biogears/version.h>

#include <biogears/string/manipulation.h>

namespace biogears {


//-----------------------------------------------------------------------------

constexpr char const * _PROJECT_NAME_ = "${ROOT_PROJECT_NAME}";
constexpr char const * _REV_HASH_ = "${${ROOT_PROJECT_NAME}_VERSION_HASH}";
constexpr char const * _REV_TAG_ = "${${ROOT_PROJECT_NAME}_VERSION_TAG}";

constexpr bool _OFFICAL_RELEASE_ = ${${ROOT_PROJECT_NAME}_DIRTY_BUILD};

constexpr int _MAJOR_VERSION_NUMBER_  = ${${ROOT_PROJECT_NAME}_VERSION_MAJOR};
constexpr int _MINOR_VERSION_NUMBER_  = ${${ROOT_PROJECT_NAME}_VERSION_MINOR};
constexpr int _PATCH_VERSION_NUMBER_  = ${${ROOT_PROJECT_NAME}_VERSION_PATCH};
constexpr int _TWEAK_VERSION_NUMBER_  = ${${ROOT_PROJECT_NAME}_VERSION_TWEAK};


using namespace std::string_literals;
std::string version_string()
{
  if (_TWEAK_VERSION_NUMBER_)
    return biogears::asprintf("%d.%d.%d" ,_MAJOR_VERSION_NUMBER_,_MINOR_VERSION_NUMBER_,_PATCH_VERSION_NUMBER_);
  else 
    return biogears::asprintf("%d.%d.%d+%d", _MAJOR_VERSION_NUMBER_,_MINOR_VERSION_NUMBER_,_PATCH_VERSION_NUMBER_,_TWEAK_VERSION_NUMBER_);
}
//-----------------------------------------------------------------------------
char const * version_string_str()
{
  static std::string version_str; 
  if( version_str.empty() )
  {  version_str = version_string(); }
  return version_str.c_str();
}
//-----------------------------------------------------------------------------
std::string full_version_string()
{
  if (_TWEAK_VERSION_NUMBER_)
    return biogears::asprintf("%d.%d.%d-%s", _MAJOR_VERSION_NUMBER_,_MINOR_VERSION_NUMBER_,_PATCH_VERSION_NUMBER_,_REV_HASH_);
  else 
    return biogears::asprintf("%d.%d.%d+%d-%s", _MAJOR_VERSION_NUMBER_,_MINOR_VERSION_NUMBER_,_PATCH_VERSION_NUMBER_,_TWEAK_VERSION_NUMBER_,_REV_HASH_);
}
//-----------------------------------------------------------------------------
char const * full_version_string_str()
{
  static std::string full_version_str; 
  if( full_version_str.empty() )
  {  full_version_str = full_version_string(); }
  return full_version_str.c_str();

}
//-----------------------------------------------------------------------------
std::string project_name()
{
  return _PROJECT_NAME_;
}
//-----------------------------------------------------------------------------
char const * project_name_str()
{
 return _PROJECT_NAME_;
}
//-----------------------------------------------------------------------------
std::string rev_hash()
{
  return _REV_HASH_;
}
//-----------------------------------------------------------------------------
char const * rev_hash_str()
{
  return _REV_HASH_;
}
//-----------------------------------------------------------------------------
std::string rev_tag()
{
  return _REV_TAG_; 
}

//-----------------------------------------------------------------------------
char const * rev_tag_str()
{
  return _REV_TAG_;
}
//-----------------------------------------------------------------------------

int rev_offset()
{
  return _TWEAK_VERSION_NUMBER_;
}
//-----------------------------------------------------------------------------

int biogears_major_version()
{
  return _MAJOR_VERSION_NUMBER_;
}
//-----------------------------------------------------------------------------
int biogears_minor_version()
{
  return _MINOR_VERSION_NUMBER_;
}
//-----------------------------------------------------------------------------
int biogears_patch_version()
{
  return _PATCH_VERSION_NUMBER_;
}
//-----------------------------------------------------------------------------
bool biogears_offical_release()
{
  return _OFFICAL_RELEASE_;
}
}
